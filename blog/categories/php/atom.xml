<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | My Octopress Blog]]></title>
  <link href="http://kusoayan.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://kusoayan.github.com/"/>
  <updated>2012-04-20T01:03:27+08:00</updated>
  <id>http://kusoayan.github.com/</id>
  <author>
    <name><![CDATA[Lazy Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 fuelphp email 套件寄gmail]]></title>
    <link href="http://kusoayan.github.com/blog/2012/04/20/fuelphp-email-gmail/"/>
    <updated>2012-04-20T00:42:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/04/20/fuelphp-email-gmail</id>
    <content type="html"><![CDATA[<p>這篇紀錄如何在 FuelPHP 中透過 email 這個 package 去寄 email，以及利用 gmail 去寄信！</p>

<!-- more -->


<p>從 1.1 版開始，email 套件就有被包含在官方下載版本中，所以只需要引入就好，
可以在兩個地方引入：
``` php config.php
// 在 app/config/config.php 的 'always_load' 底下
'packages' => array(</p>

<pre><code>'email',
</code></pre>

<p>),</p>

<p>// 或在 controller 中:
\Package::load('email');
```
然後把 packages/email/config/email.php 複製到 app/config/email.php 作為預設的設定檔，其中有些參數可以調整，這裡就紀錄我有用到的部份：
1. drive：預設是 'mail' 不過因為我要透過 gmail 去寄信所以這裡改成 'smtp'
2. smtp.host：預設為空，我改成了 gmail 的 'ssl://smtp.gmail.com'
3. smtp.port：預設是 25，同樣改成了 gmail 的 465
4. smtp.username：這裡就填上 gmail 的帳號（不用包含 @gmail.com）
5. smtp.password：這裡填 gmail 的密碼
6. newline：預設是 "\n" 不過為了讓 gmail 成功運作我改成了 "\r\n"，其實我也不知道為什麼要這樣，問了資工系強者學長後才知道可能是 Protocal 要求</p>

<p>使用方面則超簡單
``` php
&lt;?php
 // Create an instance
$email = Email::forge();</p>

<p>// 寄件人的地址
$email->from('my@email.me', 'My Name');</p>

<p>// 收件人的地址
$email->to('blablabla@xxxmail.com', 'Johny Squid');</p>

<p>// 標題
$email->subject('This is the subject');</p>

<p>// 如果要一次寄給多人的話，可以用：
$email->to(array(</p>

<pre><code>'example@mail.com',
'another@mail.com' =&gt; 'With a Name',
</code></pre>

<p>);</p>

<p>// 最後就是內容
$email->body('This is my message');
```</p>

<p>然後可以使用 <code>send()</code> 方法來寄送：
``` php
&lt;?php
try
{</p>

<pre><code>$email-&gt;send();
</code></pre>

<p>}
catch(\EmailValidationFailedException $e)
{</p>

<pre><code>// The validation failed
</code></pre>

<p>}
catch(\EmailSendingFailedException $e)
{</p>

<pre><code>// The driver could not send the email
</code></pre>

<p>}
```
當寄送郵件的時候，會有兩種例外狀況可以處理，分別是
- \EmailValidationFailedException 當郵件地址格式沒通過驗證的時候
- \EmailSendingFailedException 當 driver 沒有成功運行的時候</p>

<p>基本上我就用到這些了，不過如果要再更實用點的話，其實可以設定 html_body：
<code>php
$email-&gt;html_body(\View::forge('email/template', $email_data));
</code>
還可以搭配 template 來用非常方便！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHP 安裝配置（一）]]></title>
    <link href="http://kusoayan.github.com/blog/2012/04/16/fuelphp-setup/"/>
    <updated>2012-04-16T20:57:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/04/16/fuelphp-setup</id>
    <content type="html"><![CDATA[<p>這系列記一下 FuelPHP 的安裝配置步驟，config、orm、auth、oil 等。</p>

<!-- more -->


<p>按照官方網站上的說明，可以藉由兩種方式來安裝：</p>

<ol>
<li><p>直接透過指令安裝：
 ```</p>

<pre><code> $ curl get.fuelphp.com/oil | sh`
</code></pre>

 <code>
 這種方式目前只在 \*nix 系統（Linux、OS X、Unix、etc.）上可以使用，下了指令之後，他會自己把 oil 這個 shell-script 抓下來然後安裝到你的 `/usr/bin` 底下，也因此過程中他會需要你的密碼來授權。裝完之後可以看一下這個 shell-script 到底幹了什麼事情；
</code> bash oil

<pre><code> #!/bin/bash

 if [ -f "./oil" ]; then
         php oil "$@"
 else

         if [ "$1" == "create" ]; then

                 if [ ! `which git` ]; then 
                     echo "For this installer to work you'll need to install Git."
                     echo '        http://git-scm.com/'
                 fi

                 git clone --recursive git://github.com/fuel/fuel.git "./$2"
                 php "./$2/oil" refine install
         else
                 echo 'This is not a valid Fuel installation so Oil is a bit lost.'
                 echo '        http://fuelphp.com/docs/installation/instructions.html'

         fi
 fi
</code></pre>

<p> ```</p></li>
<li><p>手動安裝</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHP json]]></title>
    <link href="http://kusoayan.github.com/blog/2012/04/16/fuelphp-json/"/>
    <updated>2012-04-16T20:57:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/04/16/fuelphp-json</id>
    <content type="html"><![CDATA[<p>在寫台大竹友會的竹塹周網站時，剛好有要用到 FuelPHP 的 json 回傳，
所以這邊就簡單的紀錄一下，
要在 FuelPHP 中使用 json 非常簡單，在 FuelPHP 的官方 docs 中有<a href="http://docs.fuelphp.com/general/controllers/rest.html">提到</a>，你可以建立一個 Controller 去 extends Controller_Rest，像是：
``` php
&lt;?php
class Controller_Items extends Controller_Rest
{</p>

<pre><code>public function post_list()
{
    $items = Model_Item::find('all');
    $data = array();

    $i = 0;
    foreach ($items as $item)
    {
        $data[$i]['item_id'] = $item-&gt;id;
        $data[$i]['item_name'] = $item-&gt;name;
        $data[$i++]['item_price'] = $item-&gt;price;
    }

    $this-&gt;response(array(
                'items' =&gt; $data,
                ));
}
</code></pre>

<p>}
```
這是我在竹友會網站中應用到的例子。</p>

<p>接著就可以用 http://your.domain/items/list.json 來取得 json 物件。</p>

<p>另外值得一提的是，你會發現這時候 method 的開頭並不是 action<em>，而是 post</em>，其實這表示你限定可以傳入資料的型式，你可以用的有：
* GET
* POST
* PUT
* DELETE
後面兩種是比較少用到，而且大多數瀏覽器也都不支援的！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fuelphp - oil generate 出錯]]></title>
    <link href="http://kusoayan.github.com/blog/2012/04/16/fuelphp-oil-generate-chu-cuo/"/>
    <updated>2012-04-16T16:49:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/04/16/fuelphp-oil-generate-chu-cuo</id>
    <content type="html"><![CDATA[<p>今天要用 FuelPHP 的 oil 時出現了一點小錯誤，當我下指令</p>

<pre><code>oil generate model users username:varchar[50] password:string group:int email:string last_login:int login_hash:string profile_fields:text
</code></pre>

<p>時卻出現 Error 說找不到 migrations 的資料夾，上 IRC 問了之後才知道問題是出在 php.ini 中的 <code>open_basedir</code>，因為我有設定 php.ini 中的這個變數，導致 oil 沒辦法正確 resolve 資料夾。
在 IRC 上討論了半天最後解法是直接把 <code>open_basedir</code> 直接 comment 掉。</p>
]]></content>
  </entry>
  
</feed>
