<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Lazy is good]]></title>
  <link href="http://kusoayan.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://kusoayan.github.com/"/>
  <updated>2012-06-01T23:26:47+08:00</updated>
  <id>http://kusoayan.github.com/</id>
  <author>
    <name><![CDATA[Lazy Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[佈署 FuelPHP 到 PagodaBox: PHP 的 Heroku]]></title>
    <link href="http://kusoayan.github.com/blog/2012/05/19/fuelphp-pagodabox-php-cloud/"/>
    <updated>2012-05-19T16:55:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/05/19/fuelphp-pagodabox-php-cloud</id>
    <content type="html"><![CDATA[<p>有寫 Ruby 的人一定知道 <a href="http://www.heroku.com/">Heroku</a>，簡直就是 ROR 的天堂吧…雖然說 Heroku 也可以 deploy PHP，但是總是有種依附在 Rubyer 底下的感覺（？）XD</p>

<p>所以今天就來介紹一下 <a href="http://pagodabox.com/">PagodaBox</a>，以及怎麼 deploy FuelPHP on it！</p>

<!-- more -->


<p>PagodaBox 和 Heroku 一樣是屬於 PaaS(Platform as a Service) 平台，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解決 php_network_getaddresses: getaddrinfo failed]]></title>
    <link href="http://kusoayan.github.com/blog/2012/04/27/php-network-getaddresses-getaddrinfo-failed/"/>
    <updated>2012-04-27T23:22:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/04/27/php-network-getaddresses-getaddrinfo-failed</id>
    <content type="html"><![CDATA[<p>今天在用 fuelphp 寄 gmail 的時候跳出了這個該死的錯誤
<code>php_network_getaddresses: getaddrinfo failed</code></p>

<p>google 之後還是找不到好解法，無耐之下只好用 dirty and quick 的方式來解決，
先 <code>ping smtp.gmail.com</code>，然後把取得的 ip 填到 /etc/hosts 底下…</p>

<p>就先這樣吧…看能不能再找到更好的解法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 幫 PHP 語句上色而不需要 php tag]]></title>
    <link href="http://kusoayan.github.com/blog/2012/04/22/octopress-highlight-phpinline/"/>
    <updated>2012-04-22T14:53:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/04/22/octopress-highlight-phpinline</id>
    <content type="html"><![CDATA[<p>在幫程式碼上色時可以使用 codeblock 來包住程式碼區塊，但是像要幫 PHP 上色時卻會有個麻煩，如果程式碼開頭沒有<code>&lt;?php</code>這個 tag 的話，就不會被上色了：</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>php without tag </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">echo &quot;Hello World!&quot;;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>php with tag  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">echo &quot;Hello World!&quot;;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="https://gist.github.com/2398211">參考解法</a>：
修改 octopress 資料夾底下的 plugins/pygments_code.rb，在大約第 14 行的地方加入
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>plugins/pygments_code.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">opts</span> <span class="o">=</span> <span class="p">{}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if lang == &#39;phpinline&#39;</span>
</span><span class='line'><span class="sr">  lang = &#39;php&#39;</span>
</span><span class='line'><span class="sr">  opts = {:startinline =&amp;gt; true}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>之後使用 lang:phpinline 就可以省去 php tag 了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fuelphp 新增（修改）欄位]]></title>
    <link href="http://kusoayan.github.com/blog/2012/04/22/fuelphp-add-field/"/>
    <updated>2012-04-22T10:58:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/04/22/fuelphp-add-field</id>
    <content type="html"><![CDATA[<p>這次就來記一下 FuelPHP 的 migration。</p>

<p>用 <code>oil generate</code> 建完一大堆 Model、DB Table 之後，如果想更改、新增欄位怎麼辦？</p>

<!-- more -->


<p>這時候就可以用 FuelPHP 強大的 migration 功能！</p>

<p>首先先建立一個 migration 的檔案在 app/migrations 底下，開頭請照順序 001~999 這樣編號，不能跳號、也不能有重複的，舉個例子，</p>

<p>這是 OK 的：</p>

<ul>
<li>migrations/

<ul>
<li>001_create_users.php</li>
<li>002_create_items.php</li>
</ul>
</li>
</ul>


<p>這是不 OK 的：</p>

<ul>
<li>migrations/

<ul>
<li>001_create_users.php</li>
<li>002_create_items.php</li>
<li>002_create_books.php</li>
<li>004_create_stores.php</li>
</ul>
</li>
</ul>


<p>接著，這個 migration 檔案的內容可以參考下列格式
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>006_example.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">Fuel\Migrations</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Example</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">\DBUtil</span><span class="o">::</span><span class="na">create_table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;id&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">11</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">,</span> <span class="s1">&#39;auto_increment&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">true</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;username&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">50</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;password&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">255</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;group&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">11</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;email&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">255</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;last_login&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">11</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;login_hash&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">255</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;profile_fields&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;text&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;created_at&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">11</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;updated_at&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">11</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">\DBUtil</span><span class="o">::</span><span class="na">drop_table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>首先注意到的是，會有兩個 method：up 還有 down，分別是讓 oil 可以知道怎麼執行或是反執行這個 migration，也就是說每個 migration 的動作都是可逆的！
再來是新增欄位的方式，可以參考 FuelPHP 的 <a href="http://docs.fuelphp.com/classes/database/dbutil.html#/method_add_fields">DBUtil</a>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>add fiel  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">\DBUtil</span><span class="o">::</span><span class="na">add_fields</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s1">&#39;surname&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">100</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">),</span>
</span><span class='line'><span class="s1">&#39;twitter_name&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;constraint&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">100</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
別忘了在 down method 中加入反操作
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>drop fiel  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">\DBUtil</span><span class="o">::</span><span class="na">drop</span><span class="nx">\_fields</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="s1">&#39;surname&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>當 migration 的檔案建立好之後，就可以直接使用 oil 來幫你處理剩下的事情了！</p>

<p><code>php oil refine migrate</code></p>

<p>這個指令會讓 oil 自動 migrate 到最新的版本，當然你也可以自己指定版本或是其他操作：</p>

<p><code>
$ php oil refine migrate:current
$ php oil refine migrate:up
$ php oil refine migrate:down
$ php oil refine migrate --version=10
</code></p>

<p>這樣 database 的 table 就都弄好了，接下來記得修改一下你的 model，通常需要加的是 validate 的部份，加上新的欄位的驗證方式！</p>

<p>寫到這邊才發現其實 FuelPHP 的 <code>oil generate</code> 有更強大的功能…他可以幫你<a href="http://docs.fuelphp.com/packages/oil/generate.html#/migrations">產生 migrate 檔案</a> XD
所以你就可以用這種更快速的方式來產生 migrations：</p>

<p><code>
$ php oil generate migration create_users name:text email:string[50] password:string[125]
$ php oil generate migration rename_table_users_to_accounts
$ php oil generate migration add_bio_to_accounts bio:text
$ php oil generate migration rename_field_name_to_username_in_accounts
$ php oil generate migration drop_accounts
</code></p>

<p>簡直是太爽了XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 fuelphp email 套件寄gmail]]></title>
    <link href="http://kusoayan.github.com/blog/2012/04/20/fuelphp-email-gmail/"/>
    <updated>2012-04-20T00:42:00+08:00</updated>
    <id>http://kusoayan.github.com/blog/2012/04/20/fuelphp-email-gmail</id>
    <content type="html"><![CDATA[<p>這篇紀錄如何在 FuelPHP 中透過 email 這個 package 去寄 email，以及利用 gmail 去寄信！</p>

<!-- more -->


<p>從 1.1 版開始，email 套件就有被包含在官方下載版本中，所以只需要引入就好，
可以在兩個地方引入：
``` php config.php
// 在 app/config/config.php 的 'always_load' 底下
'packages' => array(</p>

<pre><code>'email',
</code></pre>

<p>),</p>

<p>// 或在 controller 中:
\Package::load('email');
```</p>

<p>然後把 packages/email/config/email.php 複製到 app/config/email.php 作為預設的設定檔，其中有些參數可以調整，這裡就紀錄我有用到的部份：</p>

<ol>
<li>drive：預設是 'mail' 不過因為我要透過 gmail 去寄信所以這裡改成 'smtp'</li>
<li>smtp.host：預設為空，我改成了 gmail 的 'ssl://smtp.gmail.com'</li>
<li>smtp.port：預設是 25，同樣改成了 gmail 的 465</li>
<li>smtp.username：這裡就填上 gmail 的帳號（不用包含 @gmail.com）</li>
<li>smtp.password：這裡填 gmail 的密碼</li>
<li>newline：預設是 "\n" 不過為了讓 gmail 成功運作我改成了 "\r\n"，其實我也不知道為什麼要這樣，問了資工系強者學長後才知道可能是 Protocal 要求</li>
</ol>


<p>使用方面則超簡單
``` php
&lt;?php
 // Create an instance
$email = Email::forge();</p>

<p>// 寄件人的地址
$email->from('my@email.me', 'My Name');</p>

<p>// 收件人的地址
$email->to('blablabla@xxxmail.com', 'Johny Squid');</p>

<p>// 標題
$email->subject('This is the subject');</p>

<p>// 如果要一次寄給多人的話，可以用：
$email->to(array(</p>

<pre><code>'example@mail.com',
'another@mail.com' =&gt; 'With a Name',
</code></pre>

<p>);</p>

<p>// 最後就是內容
$email->body('This is my message');
```</p>

<p>然後可以使用 <code>send()</code> 方法來寄送：
``` php
&lt;?php
try
{</p>

<pre><code>$email-&gt;send();
</code></pre>

<p>}
catch(\EmailValidationFailedException $e)
{</p>

<pre><code>// The validation failed
</code></pre>

<p>}
catch(\EmailSendingFailedException $e)
{</p>

<pre><code>// The driver could not send the email
</code></pre>

<p>}
```</p>

<p>當寄送郵件的時候，會有兩種例外狀況可以處理，分別是：</p>

<ol>
<li>\EmailValidationFailedException 當郵件地址格式沒通過驗證的時候</li>
<li>\EmailSendingFailedException 當 driver 沒有成功運行的時候</li>
</ol>


<p>基本上我就用到這些了，不過如果要再更實用點的話，其實可以設定 html_body：
<code>php
$email-&gt;html_body(\View::forge('email/template', $email_data));
</code>
還可以搭配 template 來用非常方便！</p>
]]></content>
  </entry>
  
</feed>
